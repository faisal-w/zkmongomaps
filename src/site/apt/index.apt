	------
	ZK Serverside Pagination with Spring Data MongoDB 
	------

Introduction

  Handling large data sets efficiently can be critical in creating a responsive application. An standard strategy is to offload the pagination of the data to the database. In this article will combine ZK MVVM, Spring Data MongoDB and Google Maps to browse pages of zipcode data. The sourcecode is available on Github at {{{https://github.com/simbo1905/zkmongomaps}zkmongomaps}} and the application can be viewed running on {{{http://zkmongomaps-simbo1905.rhcloud.com/}openshift}}.

The Screen

  The screen is a Google Maps component driven by a paginated listbox as shown below: 

[./images/screen.png] Sample Screen

  The screen renders simple Zipcode entities which are defined within the file {{{https://github.com/simbo1905/zkmongomaps/blob/master/src/main/java/org/github/simbo1905/zkmongogmaps/app/Zipcode.java}Zipcode.java}} outlined below: 
  
+--------------------------

	08 @Document
	09 public class Zipcode {
	10 	@Id
	11 	private String _id;
	12 	
	13 	private int pop = 0;
	14 	
	15 	private String state = null;
	16 	
	17 	private double[] loc;
	18 
	19 	private String city;
	
		// getters setters constructors
		
		// expose mongo geospacial pair as properties for screen
	
	72 	public double[] getLoc() {
	73 		return loc;
	74 	}
	75 
	76 	public float getLng() {
	77 		return (float) loc[0];
	78 	}
	79 
	80 	public float getLat() {
	81 		return (float) loc[1];
	82 	}
	83 
	84 	public void setLat(float lat) {
	85 		loc[1] = lat;
	86 	}


+--------------------------

  The entity class is marked with Spring Data persistence annotations @Document and @Id. This marks the entity for mapping into MongoDB and defines the document primary key. The remainder of the class are basic properties which Spring Data maps into MongoDB documents using relection. 

  The screen is defined within a single ZUL page withing the file {{{https://github.com/simbo1905/zkmongomaps/blob/master/src/main/webapp/index.zul}index.zul}} Here is the entire ZUL screen: 

+--------------------------

	   <?xml version="1.0" encoding="UTF-8"?>
	02 <?variable-resolver class="org.zkoss.zkplus.spring.DelegatingVariableResolver"?>
	03 <zk xmlns:n="native">
	04   <window border="none" width="600px" apply="org.zkoss.bind.BindComposer"
	05     viewModel="@id('vm') @init('org.github.simbo1905.zkmongogmaps.view.ZipcodeViewModel')">
	06 
	07     <gmaps id="mymap" version="3.5" width="600px" height="450px" showSmallCtrl="true" 
	08       lat="@load(vm.pickedZipcode ne null ? vm.pickedZipcode.lat : 51)"
	09       lng="@load(vm.pickedZipcode ne null ? vm.pickedZipcode.lng : 0)">
	10     </gmaps>
	11 
	12     <vbox width="600px">
	13       <listbox height="330px" model="@load(vm.zipcodes)"
	14         selectedItem="@save(vm.pickedZipcode)">
	15         <listhead>
	16           <listheader label="Id" />
	17           <listheader label="Name" />
	18           <listheader label="State" />
	19           <listheader label="Population" />
	20         </listhead>
	21         <template name="model" var="zipcode">
	22           <listitem>
	23             <listcell label="@load(zipcode._id)" />
	24             <listcell label="@load(zipcode.city)" />
	25             <listcell label="@load(zipcode.state)" />
	26             <listcell label="@load(zipcode.pop)" />
	27           </listitem>
	28         </template>
	29       </listbox>
	30       <paging pageSize="@load(vm.pageSize)" totalSize="@load(vm.totalSize)"
	31         activePage="@save(vm.activePage)" />
	32     </vbox>
	33   </window>
	34   Fork this code at <n:a href="https://github.com/simbo1905/zkmongomaps">github.com</n:a>
	35 </zk>

+--------------------------

  The ZUL file makes use of the framework support for the MVVM pattern using {{{http://books.zkoss.org/wiki/ZK_Developer%27s_Reference/MVVM}ZK Bind}}. Lines 8 and 9 of the ZUL contain @load databindings for the 'lat' and 'lng' properties of the gmaps component as highlighted below: 
  
+--------------------------

	<gmaps 
	lat="@load(vm.pickedZipcode ne null ? vm.pickedZipcode.lat : 51)"
	lng="@load(vm.pickedZipcode ne null ? vm.pickedZipcode.lng : 0)">
	</gmaps>

+--------------------------
  
  These databindings are EL expression defining null-safe bindings onto the corresponding properties of the 'vm.pickedZipcode' object. Whenever the 'pickedZipcode' attribute of the ViewModel is updated to be a new city object the 'lat' and 'lng' properties will be loaded into the gmaps component. This causes the google maps component to show the location of the zip code. 
  
  Line 14 has the @save databinding applied to the 'selectedItem' attribute of the listbox: 
  
+--------------------------

	<listbox 
	selectedItem="@save(vm.pickedZipcode)">

+--------------------------  
  
